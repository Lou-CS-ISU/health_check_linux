#! /bin/sh

PROG=`basename $0`
PROGDIR=`dirname $0`
TMPDIR=/tmp/
. $PROGDIR/$PROG.env

lRC=0

# Filesystem check

echo "<TABLE  cellSpacing=5 border=1 cellPadding=0>" 
echo "<TBODY>" 

TH=`expr 100 - $MEMORY_THRESHOLD`

echo "<TR><TD align=center bgcolor=lightyellow>&nbsp;</TD><TD align=center bgcolor=lightyellow>Total</TD><TD align=center bgcolor=lightyellow>Used</TD><TD align=center bgcolor=lightyellow>Free</TD><TD align=center bgcolor=lightyellow>% Free (Threshold < $TH)</TD><TD align=center bgcolor=lightyellow>Shared</TD><TD align=center bgcolor=lightyellow>Buffers</TD><TD align=center bgcolor=lightyellow>Cached</TD align=center bgcolor=lightyellow></TR>" 

free -tml > $TMPDIR/$PROG.out

cached=`tail +2 $TMPDIR/$PROG.out | head -1 | awk '{print $(NF)}'`
buffer=`tail +2 $TMPDIR/$PROG.out | head -1 | awk '{print $(NF-1)}'`
swap_used=`grep ^Swap: $TMPDIR/$PROG.out | awk '{print $3}'`
swap_free=`grep ^Swap: $TMPDIR/$PROG.out | awk '{print $4}'`

# echo cached = $cached buffer = $buffer

tail +2 $TMPDIR/$PROG.out | awk 'BEGIN{J=1}{
	print "<TR>";
	for (i=1; i<=4; i++) {
		printf "<TD align=center bgcolor=ivory>%s</TD>\n", $i;
	}
	if ( $2 != "buffers/cache:" && $2 != "0" ) {
		printf "<TD align=center bgcolor=ivory>%5.2f %c</TD>\n", $4/$2*100, 37;
	} else {
		print "<TD align=center bgcolor=ivory>&nbsp;</TD>";
	}
	for (i=5; i<=NF; i++) {
		printf "<TD align=center bgcolor=ivory>%s</TD>\n", $i;
	}
	print "</TR>";
	if ( J == 5 ) exit 0;
	J=J+1;
}' 

tail -1 $TMPDIR/$PROG.out | awk -v MEMORY_THRESHOLD=$MEMORY_THRESHOLD -v cached=$cached -v buffer=$buffer '{
	print "<TR>";
	if ( ($3-buffer-cached) / $2 * 100 < MEMORY_THRESHOLD ) {
		printf "<TD align=center bgcolor=ivory>%s</TD>\n", $1;
		printf "<TD align=center bgcolor=ivory>%s</TD>\n", $2;
		printf "<TD align=center bgcolor=ivory>%s (used - buffers - cached + swap used)</TD>\n", $3-cached-buffer;
		printf "<TD align=center bgcolor=ivory>%s (free + buffers + cached + swap free)</TD>\n", $4+buffer+cached;

		printf "<TD align=center bgcolor=ivory>%5.2f %c</TD>\n", (buffer + cached + $4)/$2*100, 37, MEMORY_THRESHOLD, 37;
		print "</TR>";
		exit 0;
	}
	else {
		printf "<TD align=center bgcolor=red>%s</TD>\n", $1;
		printf "<TD align=center bgcolor=red>%s</TD>\n", $2;
		printf "<TD align=center bgcolor=red>%s (used - buffers - cached + swap used)</TD>\n", $3-cached-buffer;
		printf "<TD align=center bgcolor=red>%s (free + buffers + cached + swap used)</TD>\n", $4+buffer+cached;
		printf "<TD align=center bgcolor=red>%5.2f %c</TD>\n", (buffer + cached + $4) / $2 * 100, 37, MEMORY_THRESHOLD, 37;
		print "</TR>";
		exit 1;
	}
}'

lRC=$?

echo "</TBODY>" 
echo "</TABLE>" 

echo "<BR>Top $HOW_MANY_PROCESS_TO_SEE Memory Processes"

ps -eo pid,user,vsize,rss,pcpu,pmem,time,args | sort -k3 -rn | head -$HOW_MANY_PROCESS_TO_SEE > $TMPDIR/$PROG.out.1

echo "<BR>"
echo "<BR>"

echo "<TABLE  cellSpacing=5 border=1 cellPadding=0>" 
echo "<TBODY>" 

echo "<TR><TD align=center bgcolor=lightyellow>PID</TD><TD align=center bgcolor=lightyellow>USER</TD><TD align=center bgcolor=lightyellow>Virtual Size</TD><TD align=center bgcolor=lightyellow>Resident Size</TD><TD align=center bgcolor=lightyellow>% CPU</TD><TD align=center bgcolor=lightyellow>% MEM</TD><TD align=center bgcolor=lightyellow>TIME+</TD><TD align=center bgcolor=lightyellow>Command</TD align=center bgcolor=lightyellow></TR>" 

awk -v HOW_MANY_ARGS_TO_SEE=$HOW_MANY_ARGS_TO_SEE '{
        print "<TR>";
        for (i=1; i<=7; i++) {
		if ( i == 3 || i == 4 ) {
                	printf "<TD align=center bgcolor=ivory>%dM</TD>\n", $i/1024;
		} else {
	                printf "<TD align=center bgcolor=ivory>%s</TD>\n", $i;
		}
        }
        printf "<TD align=left bgcolor=ivory>";

	if ( NF - 7 > HOW_MANY_ARGS_TO_SEE ) 
		STOP_AT=HOW_MANY_ARGS_TO_SEE + 7;
	else
		STOP_AT=NF;

        for (i=8; i<=STOP_AT; i++) {
                printf "%s ", $i;
        }
	if ( NF - 7 > HOW_MANY_ARGS_TO_SEE ) print "...";
        printf "</TD>";
        print "</TR>";
}' $TMPDIR/$PROG.out.1


echo "</TBODY>" 
echo "</TABLE>" 

if [ $lRC -gt 0 ]; then
   echo "MEMORY ALERT " >> "/tmp/subject_issues"
fi

exit $lRC

